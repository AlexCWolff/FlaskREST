# Basic decorator
import functools

def my_decorator(func):
    @functools.wraps(func)
    def function_that_runs_func():
        print("In the decorator!")
        func() # make sure to call the function, otherwise it will be replaced
        print("After the decorator!")
    return function_that_runs_func

@my_decorator
def my_function():
    print("I'm the function!")

my_function()


# Decorator that accepts arguments

def decorator_with_arguments(number)
    # Why is a third function needed? If we only have one layer of wrapper functions, 
    # then it's going to return the same thing whenever we use the decorator. The outer
    # layer takes the arguments and implicitly passes the function, the middle layer 
    # receives the function, and the inner layer executes the logic.
    def my_decorator(func):
        @functools.wraps(func)
        # Always use *args, **kwargs to ensure they are passed to the function
        def function_that_runs_func(*args, **kwargs):
            print("In the decorator!")
            if number == 56:
                print("Not running the function!")
            else:
                func(*args, **kwargs) 
            print("After the decorator!")
        return function_that_runs_func
    return my_decorator

@decorator_with_arguments(56)
def my_function_too(x, y):
    print(x + y)

my_function_too(57, 67)
